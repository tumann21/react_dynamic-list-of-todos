{"version":3,"sources":["components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","api.ts","App.tsx","index.tsx"],"names":["TodoList","selectedUserId","todos","useState","query","setQuery","selectedOption","setSelectedOption","todosList","setTodosList","useEffect","filter","todo","completed","visibleTodos","title","toLowerCase","includes","className","type","placeholder","value","onChange","event","target","onClick","list","i","length","j","Math","floor","random","k","map","user","htmlFor","id","readOnly","userId","checked","CurrentUser","name","phone","email","userMan","setUserMan","url","fetch","then","response","json","App","setSelectedUserId","todosUser","setTodosUser","uId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfa4bb80.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  selectedUserId: (uId: number) => void\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ selectedUserId, todos }) => {\n  const [query, setQuery] = useState('');\n  const [selectedOption, setSelectedOption] = useState('all');\n  const [todosList, setTodosList] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    setTodosList(todos.filter(todo => {\n      switch (selectedOption) {\n        case 'all':\n          return todo;\n        case 'completed':\n          return !todo.completed;\n        case 'active':\n          return todo.completed;\n        default:\n          return todo;\n      }\n    }));\n  }, [selectedOption, todos, query]);\n\n  const visibleTodos\n    = todosList.filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n\n  const randomize = () => {\n    const list = visibleTodos;\n\n    for (let i = list.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * i);\n      const k = list[i];\n\n      list[i] = list[j];\n      list[j] = k;\n    }\n\n    // eslint-disable-next-line\n    // console.log(list);\n\n    setTodosList(list);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          placeholder=\"title\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n\n        <select\n          value={selectedOption}\n          onChange={(event) => setSelectedOption(event.target.value)}\n        >\n          <option>all</option>\n          <option>active</option>\n          <option>completed</option>\n        </select>\n\n        <button\n          type=\"button\"\n          onClick={randomize}\n          className=\"\n          TodoList__user-button\n          TodoList__user-button--selected\n          button\n        \"\n        >\n          Random\n        </button>\n\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(user => (\n            user.completed ? (\n              <li key={user.id} className=\"TodoList__item TodoList__item--unchecked\">\n                <label htmlFor={`${user.id}`}>\n                  <input id={`${user.id}`} type=\"checkbox\" readOnly />\n                  <p>{user.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                  type=\"button\"\n                  onClick={() => selectedUserId(user.userId)}\n                >\n                  User&nbsp;\n                  {user.userId}\n                </button>\n              </li>\n            ) : (\n              <li key={user.id} className=\"TodoList__item TodoList__item--checked\">\n                <label htmlFor={`${user.id}`}>\n                  <input id={`${user.id}`} type=\"checkbox\" checked readOnly />\n                  <p>{user.title}</p>\n                </label>\n\n                <button\n                  className=\"TodoList__user-button button\"\n                  onClick={() => selectedUserId(user.userId)}\n                  type=\"button\"\n                >\n                  User&nbsp;\n                  {user.userId}\n                </button>\n              </li>\n            )\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  selectedUserId: (uId: number) => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectedUserId }) => {\n  const [userMan, setUserMan] = useState<User>({\n    name: '',\n    phone: 0,\n    email: '',\n    id: 0,\n  });\n\n  useEffect(() => {\n    getUser(userId)\n      .then(user => {\n        setUserMan(user);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {userMan.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{userMan.name}</h3>\n      <p className=\"CurrentUser__email\">{userMan.email}</p>\n      <p className=\"CurrentUser__phone\">{userMan.phone}</p>\n      <button\n        type=\"button\"\n        onClick={() => selectedUserId(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","const API_TODOS = 'https://mate.academy/students-api/todos';\nconst API_USER = 'https://mate.academy/students-api/users/';\n\nexport function getTodos() {\n  return fetch(API_TODOS)\n    .then(response => {\n      return response.json();\n    });\n}\n\nexport function getUser(url: number) {\n  return fetch(`${API_USER}${url}`)\n    .then(response => {\n      return response.json();\n    });\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todosUser, setTodosUser] = useState([]);\n\n  useEffect(() => {\n    getTodos()\n      .then(todos => setTodosUser(todos));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todosUser}\n          selectedUserId={(uId) => {\n            setSelectedUserId(uId);\n          }}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              selectedUserId={(uId) => {\n                setSelectedUserId(uId);\n              }}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}